<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🎭 The Narrative Theater 🎲</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        html {
            scroll-behavior: smooth;
        }

        body {
            font-family: 'Georgia', serif;
            background:
                repeating-linear-gradient(90deg, transparent, transparent 2px, rgba(0,0,0,.03) 2px, rgba(0,0,0,.03) 4px),
                repeating-linear-gradient(0deg, transparent, transparent 2px, rgba(0,0,0,.03) 2px, rgba(0,0,0,.03) 4px),
                linear-gradient(90deg, #8B4513 0%, #A0522D 50%, #8B4513 100%);
            background-size: 100% 100%, 100% 100%, 100% 100%;
            background-attachment: fixed;
            color: #2c1810;
            min-height: 100vh;
            padding: 20px;
            overflow-x: hidden;
        }

        .container {
            max-width: 1800px;
            margin: 0 auto;
            width: 100%;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 25px;
            background:
                repeating-linear-gradient(90deg, #654321 0px, #8B4513 2px, #654321 4px),
                linear-gradient(180deg, #d2691e 0%, #8B4513 100%);
            border: 4px solid #3e2723;
            border-radius: 8px;
            box-shadow:
                inset 0 2px 4px rgba(255,255,255,0.3),
                inset 0 -2px 4px rgba(0,0,0,0.5),
                0 4px 8px rgba(0,0,0,0.4);
        }

        h1 {
            font-size: 42px;
            color: #ffd700;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.6);
            margin-bottom: 10px;
            font-family: 'Georgia', serif;
            font-weight: bold;
        }

        .subtitle {
            color: #ffecb3;
            font-size: 16px;
            letter-spacing: 1px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.4);
        }

        .start-screen {
            text-align: center;
            padding: 60px 20px;
        }

        .start-screen h2 {
            font-size: 32px;
            color: #3e2723;
            margin-bottom: 20px;
        }

        .start-screen p {
            font-size: 18px;
            color: #5d4037;
            margin-bottom: 30px;
            line-height: 1.6;
        }

        .workspace {
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 20px;
            margin-bottom: 20px;
            align-items: start;
        }

        .story-panel {
            background:
                repeating-linear-gradient(90deg, #d2691e 0px, #cd853f 2px, #d2691e 4px),
                linear-gradient(180deg, #daa520 0%, #b8860b 100%);
            border: 3px solid #5d4037;
            border-radius: 8px;
            padding: 20px;
            box-shadow:
                inset 0 1px 3px rgba(255,255,255,0.4),
                inset 0 -1px 3px rgba(0,0,0,0.4),
                0 3px 10px rgba(0,0,0,0.3);
            max-height: 80vh;
            overflow-y: auto;
        }

        .visual-gallery {
            background:
                repeating-linear-gradient(90deg, #d2691e 0px, #cd853f 2px, #d2691e 4px),
                linear-gradient(180deg, #daa520 0%, #b8860b 100%);
            border: 3px solid #5d4037;
            border-radius: 8px;
            padding: 20px;
            box-shadow:
                inset 0 1px 3px rgba(255,255,255,0.4),
                inset 0 -1px 3px rgba(0,0,0,0.4),
                0 3px 10px rgba(0,0,0,0.3);
            max-height: 80vh;
            overflow-y: auto;
            position: sticky;
            top: 20px;
        }

        .panel-header {
            font-size: 22px;
            font-weight: bold;
            color: #3e2723;
            margin-bottom: 15px;
            padding: 10px;
            background: rgba(255,236,179,0.6);
            border: 2px solid #8B4513;
            border-radius: 4px;
            text-align: center;
            text-shadow: 1px 1px 2px rgba(255,255,255,0.5);
            box-shadow: inset 0 1px 2px rgba(255,255,255,0.3);
        }

        .scene-card {
            background: rgba(255,236,179,0.3);
            border: 2px solid #8B4513;
            border-radius: 6px;
            padding: 15px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
            animation: fadeIn 0.5s ease;
        }

        .scene-card:hover {
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            transform: translateY(-2px);
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .scene-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .scene-number {
            font-weight: bold;
            color: #8B4513;
            font-size: 14px;
        }

        .scene-location {
            background: #8B4513;
            color: #ffd700;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
        }

        .scene-narrative {
            color: #2c1810;
            line-height: 1.6;
            margin-bottom: 15px;
            font-size: 15px;
        }

        .scene-image {
            width: 100%;
            border: 2px solid #8B4513;
            border-radius: 4px;
            margin-bottom: 10px;
            background: #1a1410;
            padding: 10px;
        }

        .scene-image img {
            width: 100%;
            height: auto;
            border-radius: 4px;
        }

        .scene-actions {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        button {
            flex: 1;
            padding: 12px 24px;
            background: linear-gradient(180deg, #8B4513 0%, #654321 100%);
            color: #ffd700;
            border: 2px solid #3e2723;
            border-radius: 4px;
            font-family: 'Georgia', serif;
            font-size: 15px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s;
            text-transform: uppercase;
            box-shadow:
                inset 0 1px 2px rgba(255,255,255,0.2),
                0 2px 4px rgba(0,0,0,0.3);
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }

        button:hover:not(:disabled) {
            background: linear-gradient(180deg, #a0522d 0%, #8B4513 100%);
            transform: translateY(-1px);
            box-shadow:
                inset 0 1px 2px rgba(255,255,255,0.3),
                0 3px 6px rgba(0,0,0,0.4);
        }

        button:active {
            transform: translateY(0);
            box-shadow:
                inset 0 2px 4px rgba(0,0,0,0.3),
                0 1px 2px rgba(0,0,0,0.2);
        }

        button:disabled {
            background: linear-gradient(180deg, #666 0%, #444 100%);
            color: #999;
            cursor: not-allowed;
            box-shadow: none;
        }

        .primary-btn {
            background: linear-gradient(180deg, #d2691e 0%, #8B4513 100%);
        }

        .primary-btn:hover:not(:disabled) {
            background: linear-gradient(180deg, #daa520 0%, #a0522d 100%);
        }

        .character-bar {
            background:
                repeating-linear-gradient(90deg, #d2691e 0px, #cd853f 2px, #d2691e 4px),
                linear-gradient(180deg, #daa520 0%, #b8860b 100%);
            border: 3px solid #5d4037;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.3);
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .character-card {
            background: rgba(255,236,179,0.4);
            border: 2px solid #8B4513;
            border-radius: 6px;
            padding: 12px 20px;
            display: flex;
            align-items: center;
            gap: 10px;
            min-width: 200px;
        }

        .character-name {
            font-weight: bold;
            color: #3e2723;
            font-size: 16px;
        }

        .character-class {
            color: #8B4513;
            font-size: 13px;
        }

        .character-hp {
            margin-left: auto;
            font-weight: bold;
            color: #d9534f;
        }

        .hp-bar {
            width: 80px;
            height: 10px;
            background: rgba(0,0,0,0.3);
            border-radius: 5px;
            overflow: hidden;
            margin-top: 5px;
        }

        .hp-fill {
            height: 100%;
            background: linear-gradient(90deg, #d9534f 0%, #f0ad4e 100%);
            transition: width 0.5s ease;
        }

        .gallery-item {
            background: #1a1410;
            border: 3px solid #3e2723;
            border-radius: 6px;
            padding: 10px;
            margin-bottom: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .gallery-item:hover {
            border-color: #daa520;
            transform: translateY(-3px);
            box-shadow: 0 4px 12px rgba(218, 165, 32, 0.4);
        }

        .gallery-item img {
            width: 100%;
            height: auto;
            border-radius: 4px;
        }

        .gallery-caption {
            color: #8B7355;
            font-size: 12px;
            text-align: center;
            margin-top: 8px;
        }

        .status {
            padding: 12px 15px;
            background: rgba(255,236,179,0.3);
            border: 2px solid #8B4513;
            border-radius: 6px;
            font-size: 13px;
            text-align: center;
            color: #3e2723;
            font-weight: bold;
            margin: 10px 0;
            transition: all 0.3s ease;
        }

        .status.loading {
            background: rgba(135, 206, 250, 0.3);
            border-color: #4682B4;
            color: #1E3A5F;
            animation: pulse 1.5s infinite;
        }

        .status.error {
            background: rgba(255, 107, 107, 0.4);
            border-color: #8B0000;
            color: #8B0000;
        }

        .status.success {
            background: rgba(144, 238, 144, 0.4);
            border-color: #228B22;
            color: #006400;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }

        .quest-card {
            background: rgba(255,215,0,0.2);
            border: 3px solid #ffd700;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .quest-card h3 {
            color: #8B4513;
            margin-bottom: 10px;
        }

        .quest-card p {
            color: #2c1810;
            line-height: 1.6;
        }

        .scrollbar-custom::-webkit-scrollbar {
            width: 8px;
        }

        .scrollbar-custom::-webkit-scrollbar-track {
            background: rgba(0,0,0,0.2);
            border-radius: 4px;
        }

        .scrollbar-custom::-webkit-scrollbar-thumb {
            background: #8B4513;
            border-radius: 4px;
        }

        .scrollbar-custom::-webkit-scrollbar-thumb:hover {
            background: #a0522d;
        }

        .hidden {
            display: none;
        }

        .ai-reasoning {
            background: rgba(135, 206, 250, 0.2);
            border: 2px solid #4682B4;
            border-radius: 6px;
            padding: 15px;
            margin: 10px 0;
            font-size: 14px;
        }

        .ai-reasoning h4 {
            color: #1E3A5F;
            margin-bottom: 10px;
            font-size: 16px;
        }

        .ai-reasoning p {
            color: #2c1810;
            line-height: 1.5;
        }

        .decision-matrix {
            background: rgba(255, 215, 0, 0.2);
            border: 2px solid #ffd700;
            border-radius: 6px;
            padding: 15px;
            margin: 10px 0;
        }

        .decision-matrix h4 {
            color: #8B4513;
            margin-bottom: 10px;
        }

        .decision-option {
            background: rgba(255, 255, 255, 0.3);
            border: 1px solid #8B4513;
            border-radius: 4px;
            padding: 10px;
            margin: 8px 0;
        }

        .decision-option h5 {
            color: #3e2723;
            margin-bottom: 5px;
        }

        .decision-option p {
            color: #2c1810;
            font-size: 13px;
            margin: 0;
        }

        @media (max-width: 1024px) {
            .workspace {
                grid-template-columns: 1fr;
            }

            .visual-gallery {
                position: static;
                max-height: none;
            }
        }

        /* AI Reasoning Panel Styles */
        .ai-reasoning-panel {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            border: 2px solid #4a90e2;
            border-radius: 12px;
            margin: 20px 0;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(74, 144, 226, 0.3);
            position: relative;
            overflow: hidden;
        }

        .ai-reasoning-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #4a90e2, #00d4ff, #4a90e2);
            animation: shimmer 2s infinite;
        }

        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        .ai-reasoning-header {
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #4a90e2;
        }

        .ai-reasoning-header h3 {
            color: #00d4ff;
            font-size: 24px;
            margin-bottom: 10px;
            text-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
        }

        .scenario-text {
            color: #b8d4f0;
            font-style: italic;
            font-size: 16px;
            margin: 0;
        }

        /* Decision Matrix Styles */
        .decisions-container {
            display: grid;
            gap: 15px;
        }

        .decision-option {
            background: rgba(74, 144, 226, 0.1);
            border: 1px solid #4a90e2;
            border-radius: 8px;
            padding: 15px;
            transition: all 0.3s ease;
        }

        .decision-option:hover {
            background: rgba(74, 144, 226, 0.2);
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(74, 144, 226, 0.3);
        }

        .decision-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            flex-wrap: wrap;
        }

        .decision-header h4 {
            color: #00d4ff;
            font-size: 18px;
            margin: 0;
        }

        .decision-metrics {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .metric {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
            text-transform: uppercase;
        }

        .metric.success-rate {
            background: rgba(0, 255, 0, 0.2);
            color: #00ff00;
            border: 1px solid #00ff00;
        }

        .metric.risk-level.low {
            background: rgba(0, 255, 0, 0.2);
            color: #00ff00;
            border: 1px solid #00ff00;
        }

        .metric.risk-level.medium {
            background: rgba(255, 165, 0, 0.2);
            color: #ffa500;
            border: 1px solid #ffa500;
        }

        .metric.risk-level.high {
            background: rgba(255, 0, 0, 0.2);
            color: #ff0000;
            border: 1px solid #ff0000;
        }

        .metric.alignment.good {
            background: rgba(0, 255, 0, 0.2);
            color: #00ff00;
            border: 1px solid #00ff00;
        }

        .metric.alignment.neutral {
            background: rgba(255, 255, 0, 0.2);
            color: #ffff00;
            border: 1px solid #ffff00;
        }

        .metric.alignment.evil {
            background: rgba(255, 0, 0, 0.2);
            color: #ff0000;
            border: 1px solid #ff0000;
        }

        .decision-reasoning, .decision-consequences {
            margin-top: 10px;
        }

        .decision-reasoning h5, .decision-consequences h5 {
            color: #4a90e2;
            font-size: 14px;
            margin-bottom: 5px;
        }

        .decision-reasoning p, .decision-consequences ul {
            color: #b8d4f0;
            margin: 0;
        }

        .decision-consequences ul {
            padding-left: 20px;
        }

        .decision-consequences li {
            margin-bottom: 3px;
        }

        /* Story Branch Styles */
        .branches-container {
            display: grid;
            gap: 20px;
        }

        .story-branch {
            background: rgba(74, 144, 226, 0.1);
            border: 1px solid #4a90e2;
            border-radius: 8px;
            padding: 20px;
            transition: all 0.3s ease;
        }

        .story-branch:hover {
            background: rgba(74, 144, 226, 0.2);
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(74, 144, 226, 0.3);
        }

        .branch-header h4 {
            color: #00d4ff;
            font-size: 20px;
            margin-bottom: 10px;
        }

        .branch-description {
            color: #b8d4f0;
            font-style: italic;
            margin-bottom: 15px;
        }

        .branch-consequences {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
        }

        .consequence-section h5 {
            color: #4a90e2;
            font-size: 14px;
            margin-bottom: 8px;
        }

        .consequence-section ul {
            color: #b8d4f0;
            padding-left: 20px;
        }

        .consequence-section li {
            margin-bottom: 5px;
        }

        /* NPC Behavior Styles */
        .npc-behavior-container {
            display: grid;
            gap: 20px;
        }

        .npc-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .npc-traits h5, .npc-mood h5 {
            color: #4a90e2;
            font-size: 16px;
            margin-bottom: 10px;
        }

        .traits-list {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .trait-tag {
            background: rgba(74, 144, 226, 0.3);
            color: #00d4ff;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            border: 1px solid #4a90e2;
        }

        .mood-indicator {
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: bold;
            text-transform: uppercase;
            font-size: 14px;
        }

        .mood-indicator.friendly {
            background: rgba(0, 255, 0, 0.2);
            color: #00ff00;
            border: 1px solid #00ff00;
        }

        .mood-indicator.neutral {
            background: rgba(255, 255, 0, 0.2);
            color: #ffff00;
            border: 1px solid #ffff00;
        }

        .mood-indicator.hostile {
            background: rgba(255, 0, 0, 0.2);
            color: #ff0000;
            border: 1px solid #ff0000;
        }

        .mood-indicator.suspicious {
            background: rgba(255, 165, 0, 0.2);
            color: #ffa500;
            border: 1px solid #ffa500;
        }

        .mood-indicator.fearful {
            background: rgba(128, 0, 128, 0.2);
            color: #800080;
            border: 1px solid #800080;
        }

        .npc-reaction, .npc-dialogue, .npc-actions {
            background: rgba(74, 144, 226, 0.1);
            border: 1px solid #4a90e2;
            border-radius: 8px;
            padding: 15px;
        }

        .npc-reaction h5, .npc-dialogue h5, .npc-actions h5 {
            color: #4a90e2;
            font-size: 16px;
            margin-bottom: 10px;
        }

        .npc-reaction p, .npc-dialogue ul, .npc-actions ul {
            color: #b8d4f0;
            margin: 0;
        }

        .npc-dialogue ul, .npc-actions ul {
            padding-left: 20px;
        }

        .npc-dialogue li, .npc-actions li {
            margin-bottom: 5px;
        }

        /* Adaptive Story Styles */
        .adaptive-story-content {
            background: rgba(74, 144, 226, 0.1);
            border: 1px solid #4a90e2;
            border-radius: 8px;
            padding: 20px;
        }

        .adaptive-story-content p {
            color: #b8d4f0;
            font-size: 16px;
            line-height: 1.6;
            margin: 0;
        }

        /* Responsive Design for AI Panels */
        @media (max-width: 768px) {
            .ai-reasoning-panel {
                margin: 10px 0;
                padding: 15px;
            }

            .decision-header {
                flex-direction: column;
                align-items: flex-start;
            }

            .decision-metrics {
                margin-top: 10px;
            }

            .npc-info {
                grid-template-columns: 1fr;
            }

            .branch-consequences {
                grid-template-columns: 1fr;
            }
        }

        /* AI Controls Styles */
        .ai-controls {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            border: 2px solid #4a90e2;
            border-radius: 12px;
            margin: 20px 0;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(74, 144, 226, 0.3);
        }

        .ai-controls-header {
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #4a90e2;
        }

        .ai-controls-header h3 {
            color: #00d4ff;
            font-size: 24px;
            margin-bottom: 10px;
            text-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
        }

        .ai-controls-header p {
            color: #b8d4f0;
            font-size: 16px;
            margin: 0;
        }

        .ai-controls-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }

        .ai-control-group {
            background: rgba(74, 144, 226, 0.1);
            border: 1px solid #4a90e2;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            transition: all 0.3s ease;
        }

        .ai-control-group:hover {
            background: rgba(74, 144, 226, 0.2);
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(74, 144, 226, 0.3);
        }

        .ai-control-group h4 {
            color: #00d4ff;
            font-size: 18px;
            margin-bottom: 10px;
        }

        .ai-control-group p {
            color: #b8d4f0;
            font-size: 14px;
            margin-bottom: 15px;
        }

        .ai-btn {
            background: linear-gradient(135deg, #4a90e2 0%, #00d4ff 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .ai-btn:hover {
            background: linear-gradient(135deg, #00d4ff 0%, #4a90e2 100%);
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(74, 144, 226, 0.4);
        }

        .ai-btn:active {
            transform: translateY(0);
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            margin: 5% auto;
            padding: 30px;
            border: 2px solid #4a90e2;
            border-radius: 12px;
            width: 80%;
            max-width: 600px;
            box-shadow: 0 8px 32px rgba(74, 144, 226, 0.3);
            position: relative;
        }

        .modal-header {
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #4a90e2;
        }

        .modal-header h3 {
            color: #00d4ff;
            font-size: 24px;
            margin-bottom: 10px;
            text-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
        }

        .modal-body {
            margin-bottom: 20px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            color: #4a90e2;
            font-size: 16px;
            font-weight: bold;
            margin-bottom: 8px;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #4a90e2;
            border-radius: 6px;
            background: rgba(74, 144, 226, 0.1);
            color: #b8d4f0;
            font-size: 14px;
            font-family: inherit;
        }

        .form-group input:focus,
        .form-group textarea:focus,
        .form-group select:focus {
            outline: none;
            border-color: #00d4ff;
            box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
        }

        .form-group textarea {
            height: 100px;
            resize: vertical;
        }

        .modal-footer {
            display: flex;
            justify-content: space-between;
            gap: 15px;
        }

        .modal-btn {
            flex: 1;
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .modal-btn.primary {
            background: linear-gradient(135deg, #4a90e2 0%, #00d4ff 100%);
            color: white;
        }

        .modal-btn.secondary {
            background: rgba(74, 144, 226, 0.2);
            color: #4a90e2;
            border: 2px solid #4a90e2;
        }

        .modal-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(74, 144, 226, 0.3);
        }

        .close {
            position: absolute;
            top: 15px;
            right: 20px;
            color: #4a90e2;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .close:hover {
            color: #00d4ff;
        }

        /* Responsive Modal */
        @media (max-width: 768px) {
            .modal-content {
                width: 95%;
                margin: 10% auto;
                padding: 20px;
            }

            .ai-controls-grid {
                grid-template-columns: 1fr;
            }

            .modal-footer {
                flex-direction: column;
            }
        }
</head>
<body>
    <script>console.log('📄 HTML body starting to render...');</script>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>🎭 THE NARRATIVE THEATER 🎲</h1>
            <div class="subtitle">Where Stories Come Alive • AI-Powered D&D Adventures</div>
        </div>
        <script>console.log('📄 Header rendered');</script>

        <!-- Start Screen -->
        <script>console.log('📄 About to render start-screen...');</script>
        <div id="start-screen" class="start-screen">
            <h2>Welcome, Adventurer!</h2>
            <script>console.log('📄 Start-screen welcome text rendered');</script>
            <p>
                Embark on an epic journey where narrative and imagery merge.<br>
                Your choices shape the story, and every moment can be visualized.<br>
                The theater awaits...
            </p>

            <!-- AI Model Selection -->
            <div style="margin: 20px 0;">
                <label for="model-selector" style="color: #3e2723; font-weight: bold; margin-right: 10px;">AI Engine:</label>
                <select id="model-selector" style="padding: 8px 12px; border: 2px solid #8B4513; border-radius: 4px; background: #ffd700; color: #3e2723; font-weight: bold;">
                    <option value="gemini" selected>🤖 Gemini 2.5 Flash (AI-Enhanced)</option>
                    <option value="mistral">⚡ Mistral (Local)</option>
                </select>
            </div>

            <button class="primary-btn" onclick="startAdventure()" style="width: 300px; font-size: 18px;">
                🎭 Start Adventure
            </button>
            <div id="start-status" class="status hidden"></div>
        </div>

        <!-- Main Workspace (Hidden initially) -->
        <div id="workspace" class="workspace hidden">
            <!-- Story Panel -->
            <div class="story-panel scrollbar-custom">
                <div class="panel-header">📜 THE TALE UNFOLDS</div>

                <!-- Quest Display -->
                <div id="quest-display" class="quest-card hidden">
                    <h3>⚔️ Your Quest</h3>
                    <p id="quest-text"></p>
                </div>

                <!-- Scenes Container -->
                <div id="scenes-container">
                    <!-- Scenes will be added here dynamically -->
                </div>

                <!-- Next Scene Button -->
                <button id="next-scene-btn" onclick="nextScene()" class="primary-btn hidden">
                    ▶️ Next Scene
                </button>

                <!-- AI Decision-Making Controls -->
                <div id="ai-controls" class="ai-controls hidden">
                    <div class="ai-controls-header">
                        <h3>🤖 AI Decision Support</h3>
                        <p>Enhance your storytelling with AI-powered analysis</p>
                    </div>

                    <div class="ai-controls-grid">
                        <div class="ai-control-group">
                            <h4>🧠 Decision Matrix</h4>
                            <p>Get AI analysis for DM choices</p>
                            <button onclick="showDecisionMatrixModal()" class="ai-btn">
                                Analyze Decision
                            </button>
                        </div>

                        <div class="ai-control-group">
                            <h4>🌳 Story Branches</h4>
                            <p>Explore consequences of player choices</p>
                            <button onclick="showStoryBranchesModal()" class="ai-btn">
                                Analyze Choice
                            </button>
                        </div>

                        <div class="ai-control-group">
                            <h4>👤 NPC Behavior</h4>
                            <p>Generate dynamic NPC reactions</p>
                            <button onclick="showNPCBehaviorModal()" class="ai-btn">
                                Generate Behavior
                            </button>
                        </div>

                        <div class="ai-control-group">
                            <h4>📚 Adaptive Story</h4>
                            <p>Create story content based on progression</p>
                            <button onclick="showAdaptiveStoryModal()" class="ai-btn">
                                Generate Story
                            </button>
                        </div>
                    </div>
                </div>

                <div id="story-status" class="status hidden"></div>
            </div>

            <!-- Visual Gallery -->
            <div class="visual-gallery scrollbar-custom">
                <div class="panel-header">🎨 VISUAL GALLERY</div>
                <div id="gallery-container">
                    <p style="text-align: center; color: #8B7355; font-style: italic; padding: 20px;">
                        Images will appear here as your adventure unfolds...
                    </p>
                </div>
            </div>
        </div>

        <!-- Character Bar (Hidden initially) -->
        <div id="character-bar" class="character-bar hidden">
            <!-- Character cards will be added here dynamically -->
        </div>
    </div>

    <script>
        console.log('🚀 JavaScript file starting to load...');
        console.log('🕐 Timestamp:', new Date().toISOString());

        // =====================================================================
        // STATE MANAGEMENT
        // =====================================================================
        let sessionId = null;
        let currentTurn = 0;
        let characters = [];
        let scenes = [];
        let imageQueue = [];

        console.log('✅ Global variables initialized');

        // API Configuration
        const NARRATIVE_SERVER = 'http://localhost:5002';

        // =====================================================================
        // UTILITY FUNCTIONS
        // =====================================================================

        function showStatus(elementId, message, type = 'success') {
            const statusEl = document.getElementById(elementId);
            statusEl.textContent = message;
            statusEl.className = `status ${type}`;
            statusEl.classList.remove('hidden');
        }

        function hideStatus(elementId) {
            const statusEl = document.getElementById(elementId);
            statusEl.classList.add('hidden');
        }

        function sanitizeHTML(str) {
            const div = document.createElement('div');
            div.textContent = str;
            return div.innerHTML;
        }

        // =====================================================================
        // START ADVENTURE
        // =====================================================================

        async function startAdventure() {
            try {
                showStatus('start-status', '🎭 Initializing your adventure...', 'loading');

                const model = document.getElementById('model-selector').value;
                const response = await fetch(`${NARRATIVE_SERVER}/start-adventure`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        model: model
                    })
                });

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status}`);
                }

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.error || 'Failed to start adventure');
                }

                // Store session data
                sessionId = data.session_id;
                characters = data.characters;

                // Display quest
                displayQuest(data.quest);

                // Display first scene
                displayScene(data.first_scene);
                scenes.push(data.first_scene);

                // Display characters
                displayCharacters(characters);

                // Show workspace and hide start screen
                document.getElementById('start-screen').classList.add('hidden');
                document.getElementById('workspace').classList.remove('hidden');
                document.getElementById('character-bar').classList.remove('hidden');
                document.getElementById('next-scene-btn').classList.remove('hidden');
                showAIControls(); // Show AI decision-making controls

                // Generate character images
                for (const char of characters) {
                    generateCharacterImage(char);
                }

                console.log('✅ Adventure started!', data);

            } catch (error) {
                console.error('❌ Error starting adventure:', error);
                showStatus('start-status', `❌ ${error.message}`, 'error');
            }
        }

        // =====================================================================
        // AI DECISION-MAKING FEATURES
        // =====================================================================

        async function generateDecisionMatrix(scenario, options) {
            try {
                showStatus('story-status', '🧠 Analyzing decision options...', 'loading');

                const response = await fetch(`${NARRATIVE_SERVER}/ai/decision-matrix`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        session_id: sessionId,
                        scenario: scenario,
                        options: options
                    })
                });

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status}`);
                }

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.error || 'Failed to generate decision matrix');
                }

                displayDecisionMatrix(data.decisions, scenario);
                return data.decisions;

            } catch (error) {
                console.error('❌ Error generating decision matrix:', error);
                showStatus('story-status', `❌ ${error.message}`, 'error');
                return [];
            }
        }

        function displayDecisionMatrix(decisions, scenario) {
            const storyPanel = document.getElementById('story-panel');

            const decisionHtml = `
                <div class="ai-reasoning-panel">
                    <div class="ai-reasoning-header">
                        <h3>🧠 AI Decision Analysis</h3>
                        <p class="scenario-text">${scenario}</p>
                    </div>
                    <div class="decisions-container">
                        ${decisions.map((decision, index) => `
                            <div class="decision-option">
                                <div class="decision-header">
                                    <h4>Option ${index + 1}: ${decision.option}</h4>
                                    <div class="decision-metrics">
                                        <span class="metric success-rate">Success: ${Math.round(decision.probability_success * 100)}%</span>
                                        <span class="metric risk-level ${decision.risk_level}">Risk: ${decision.risk_level}</span>
                                        <span class="metric alignment ${decision.alignment}">${decision.alignment}</span>
                                    </div>
                                </div>
                                <div class="decision-reasoning">
                                    <h5>🤔 AI Reasoning:</h5>
                                    <p>${decision.reasoning}</p>
                                </div>
                                <div class="decision-consequences">
                                    <h5>⚡ Consequences:</h5>
                                    <ul>
                                        ${decision.consequences.map(consequence => `<li>${consequence}</li>`).join('')}
                                    </ul>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;

            storyPanel.innerHTML = decisionHtml + storyPanel.innerHTML;
        }

        async function analyzeStoryBranches(playerChoice) {
            try {
                showStatus('story-status', '🌳 Analyzing story branches...', 'loading');

                const response = await fetch(`${NARRATIVE_SERVER}/ai/story-branches`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        session_id: sessionId,
                        player_choice: playerChoice
                    })
                });

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status}`);
                }

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.error || 'Failed to analyze story branches');
                }

                displayStoryBranches(data.branches, playerChoice);
                return data.branches;

            } catch (error) {
                console.error('❌ Error analyzing story branches:', error);
                showStatus('story-status', `❌ ${error.message}`, 'error');
                return [];
            }
        }

        function displayStoryBranches(branches, playerChoice) {
            const storyPanel = document.getElementById('story-panel');

            const branchesHtml = `
                <div class="ai-reasoning-panel">
                    <div class="ai-reasoning-header">
                        <h3>🌳 Story Branch Analysis</h3>
                        <p class="scenario-text">Player Choice: ${playerChoice}</p>
                    </div>
                    <div class="branches-container">
                        ${branches.map((branch, index) => `
                            <div class="story-branch">
                                <div class="branch-header">
                                    <h4>${branch.branch_name}</h4>
                                    <p class="branch-description">${branch.description}</p>
                                </div>
                                <div class="branch-consequences">
                                    <div class="consequence-section">
                                        <h5>⚡ Immediate Consequences:</h5>
                                        <ul>
                                            ${branch.immediate_consequences.map(consequence => `<li>${consequence}</li>`).join('')}
                                        </ul>
                                    </div>
                                    <div class="consequence-section">
                                        <h5>📈 Long-term Effects:</h5>
                                        <ul>
                                            ${branch.long_term_effects.map(effect => `<li>${effect}</li>`).join('')}
                                        </ul>
                                    </div>
                                    <div class="consequence-section">
                                        <h5>👥 Character Impact:</h5>
                                        <ul>
                                            ${Object.entries(branch.character_impact).map(([char, impact]) =>
                                                `<li><strong>${char}:</strong> ${impact}</li>`
                                            ).join('')}
                                        </ul>
                                    </div>
                                    <div class="consequence-section">
                                        <h5>🌍 World Changes:</h5>
                                        <ul>
                                            ${branch.world_changes.map(change => `<li>${change}</li>`).join('')}
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;

            storyPanel.innerHTML = branchesHtml + storyPanel.innerHTML;
        }

        async function generateNPCBehavior(npcName, npcPersonality, situation) {
            try {
                showStatus('story-status', '👤 Generating NPC behavior...', 'loading');

                const response = await fetch(`${NARRATIVE_SERVER}/ai/npc-behavior`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        session_id: sessionId,
                        npc_name: npcName,
                        npc_personality: npcPersonality,
                        situation: situation
                    })
                });

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status}`);
                }

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.error || 'Failed to generate NPC behavior');
                }

                displayNPCBehavior(data.behavior);
                return data.behavior;

            } catch (error) {
                console.error('❌ Error generating NPC behavior:', error);
                showStatus('story-status', `❌ ${error.message}`, 'error');
                return null;
            }
        }

        function displayNPCBehavior(behavior) {
            const storyPanel = document.getElementById('story-panel');

            const behaviorHtml = `
                <div class="ai-reasoning-panel">
                    <div class="ai-reasoning-header">
                        <h3>👤 NPC Behavior Analysis</h3>
                        <p class="scenario-text">${behavior.npc_name}</p>
                    </div>
                    <div class="npc-behavior-container">
                        <div class="npc-info">
                            <div class="npc-traits">
                                <h5>🎭 Personality Traits:</h5>
                                <div class="traits-list">
                                    ${behavior.personality_traits.map(trait => `<span class="trait-tag">${trait}</span>`).join('')}
                                </div>
                            </div>
                            <div class="npc-mood">
                                <h5>😊 Current Mood:</h5>
                                <span class="mood-indicator ${behavior.current_mood.toLowerCase()}">${behavior.current_mood}</span>
                            </div>
                        </div>
                        <div class="npc-reaction">
                            <h5>💭 Reaction:</h5>
                            <p>${behavior.reaction}</p>
                        </div>
                        <div class="npc-dialogue">
                            <h5>💬 Dialogue Suggestions:</h5>
                            <ul>
                                ${behavior.dialogue_suggestions.map(dialogue => `<li>"${dialogue}"</li>`).join('')}
                            </ul>
                        </div>
                        <div class="npc-actions">
                            <h5>🎬 Action Recommendations:</h5>
                            <ul>
                                ${behavior.action_recommendations.map(action => `<li>${action}</li>`).join('')}
                            </ul>
                        </div>
                    </div>
                </div>
            `;

            storyPanel.innerHTML = behaviorHtml + storyPanel.innerHTML;
        }

        async function generateAdaptiveStory(storyElement) {
            try {
                showStatus('story-status', '📚 Generating adaptive story...', 'loading');

                const response = await fetch(`${NARRATIVE_SERVER}/ai/adaptive-story`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        session_id: sessionId,
                        story_element: storyElement
                    })
                });

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status}`);
                }

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.error || 'Failed to generate adaptive story');
                }

                displayAdaptiveStory(data.story_content, storyElement);
                return data.story_content;

            } catch (error) {
                console.error('❌ Error generating adaptive story:', error);
                showStatus('story-status', `❌ ${error.message}`, 'error');
                return null;
            }
        }

        function displayAdaptiveStory(storyContent, storyElement) {
            const storyPanel = document.getElementById('story-panel');

            const storyHtml = `
                <div class="ai-reasoning-panel">
                    <div class="ai-reasoning-header">
                        <h3>📚 Adaptive Story Generation</h3>
                        <p class="scenario-text">${storyElement}</p>
                    </div>
                    <div class="adaptive-story-content">
                        <p>${storyContent}</p>
                    </div>
                </div>
            `;

            storyPanel.innerHTML = storyHtml + storyPanel.innerHTML;
        }

        async function getAIEngineStatus() {
            try {
                const response = await fetch(`${NARRATIVE_SERVER}/ai/engine-status`);

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status}`);
                }

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.error || 'Failed to get engine status');
                }

                return data.engine_status;

            } catch (error) {
                console.error('❌ Error getting engine status:', error);
                return null;
            }
        }

        // =====================================================================
        // NEXT SCENE
        // =====================================================================

        async function nextScene() {
            try {
                const btn = document.getElementById('next-scene-btn');
                btn.disabled = true;

                showStatus('story-status', '🎭 The story continues...', 'loading');

                const response = await fetch(`${NARRATIVE_SERVER}/next-scene`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        session_id: sessionId
                    })
                });

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status}`);
                }

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.error || 'Failed to generate scene');
                }

                // Display the new scene
                displayScene(data.scene);
                scenes.push(data.scene);

                // Update character states
                updateCharacterStates(data.character_states);

                // Auto-generate image if flagged
                if (data.scene.auto_image) {
                    generateSceneImage(data.scene);
                }

                // Check if adventure ended
                if (data.scene.type === 'conclusion') {
                    btn.textContent = '🎉 Adventure Complete!';
                    btn.disabled = true;
                    showStatus('story-status', '🎉 The adventure has concluded!', 'success');
                } else {
                    hideStatus('story-status');
                    btn.disabled = false;
                }

                console.log('✅ Scene generated:', data.scene);

            } catch (error) {
                console.error('❌ Error generating scene:', error);
                showStatus('story-status', `❌ ${error.message}`, 'error');
                document.getElementById('next-scene-btn').disabled = false;
            }
        }

        // =====================================================================
        // DISPLAY FUNCTIONS
        // =====================================================================

        function displayQuest(questText) {
            document.getElementById('quest-text').textContent = questText;
            document.getElementById('quest-display').classList.remove('hidden');
        }

        function displayScene(scene) {
            const container = document.getElementById('scenes-container');

            const sceneCard = document.createElement('div');
            sceneCard.className = 'scene-card';
            sceneCard.id = `scene-${scene.scene_id}`;

            sceneCard.innerHTML = `
                <div class="scene-header">
                    <span class="scene-number">Scene ${scene.scene_id + 1}</span>
                    <span class="scene-location">${sanitizeHTML(scene.location)}</span>
                </div>
                <div class="scene-narrative">${sanitizeHTML(scene.narrative)}</div>
                <div id="scene-image-${scene.scene_id}" class="scene-image hidden"></div>
                <div class="scene-actions">
                    <button onclick="visualizeScene(${scene.scene_id})">🎨 Visualize This!</button>
                </div>
            `;

            container.appendChild(sceneCard);

            // Scroll to new scene
            sceneCard.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }

        function displayCharacters(chars) {
            const bar = document.getElementById('character-bar');
            bar.innerHTML = '';

            chars.forEach(char => {
                const hpPercent = (char.hp / char.max_hp) * 100;

                const card = document.createElement('div');
                card.className = 'character-card';
                card.id = `char-${char.name.replace(/\s+/g, '-')}`;

                card.innerHTML = `
                    <div>
                        <div class="character-name">${sanitizeHTML(char.name)}</div>
                        <div class="character-class">${sanitizeHTML(char.class)}</div>
                        <div class="hp-bar">
                            <div class="hp-fill" style="width: ${hpPercent}%"></div>
                        </div>
                    </div>
                    <div class="character-hp">${char.hp}/${char.max_hp} HP</div>
                `;

                bar.appendChild(card);
            });
        }

        function updateCharacterStates(states) {
            states.forEach(state => {
                const cardId = `char-${state.name.replace(/\s+/g, '-')}`;
                const card = document.getElementById(cardId);

                if (card) {
                    const hpPercent = (state.hp / state.max_hp) * 100;
                    const hpFill = card.querySelector('.hp-fill');
                    const hpText = card.querySelector('.character-hp');

                    hpFill.style.width = `${hpPercent}%`;
                    hpText.textContent = `${state.hp}/${state.max_hp} HP`;

                    // Visual feedback for damage/healing
                    card.style.transition = 'background 0.3s ease';
                    card.style.background = state.hp < characters.find(c => c.name === state.name).hp
                        ? 'rgba(255, 107, 107, 0.4)'  // Damage
                        : 'rgba(144, 238, 144, 0.4)'; // Heal

                    setTimeout(() => {
                        card.style.background = 'rgba(255,236,179,0.4)';
                    }, 500);
                }
            });

            // Update characters array
            characters = states;
        }

        function addToGallery(imageData, caption, sceneId) {
            const gallery = document.getElementById('gallery-container');

            // Remove empty message if it exists
            if (gallery.querySelector('p')) {
                gallery.innerHTML = '';
            }

            const item = document.createElement('div');
            item.className = 'gallery-item';
            item.onclick = () => scrollToScene(sceneId);

            item.innerHTML = `
                <img src="data:image/png;base64,${imageData}" alt="${sanitizeHTML(caption)}">
                <div class="gallery-caption">${sanitizeHTML(caption)}</div>
            `;

            gallery.insertBefore(item, gallery.firstChild);
        }

        function scrollToScene(sceneId) {
            const scene = document.getElementById(`scene-${sceneId}`);
            if (scene) {
                scene.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }

        // =====================================================================
        // IMAGE GENERATION
        // =====================================================================

        async function generateCharacterImage(character) {
            try {
                const description = `${character.class} warrior, detailed pixel art character, ${character.name}`;

                const response = await fetch(`${NARRATIVE_SERVER}/generate-scene-image`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        session_id: sessionId,
                        scene_id: 0,
                        scene_description: description,
                        scene_type: 'character_intro'
                    })
                });

                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        addToGallery(data.image, character.name, 0);
                        console.log(`✅ Generated image for ${character.name}`);
                    }
                }
            } catch (error) {
                console.warn(`⚠️ Could not generate image for ${character.name}:`, error);
            }
        }

        async function generateSceneImage(scene) {
            try {
                const imageContainer = document.getElementById(`scene-image-${scene.scene_id}`);
                imageContainer.innerHTML = '<p style="text-align:center;color:#8B7355;">🎨 Generating image...</p>';
                imageContainer.classList.remove('hidden');

                const response = await fetch(`${NARRATIVE_SERVER}/generate-scene-image`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        session_id: sessionId,
                        scene_id: scene.scene_id,
                        scene_description: scene.narrative.substring(0, 200),
                        scene_type: scene.type
                    })
                });

                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        imageContainer.innerHTML = `<img src="data:image/png;base64,${data.image}" alt="Scene ${scene.scene_id}">`;
                        addToGallery(data.image, `Scene ${scene.scene_id + 1}`, scene.scene_id);
                        console.log(`✅ Generated image for scene ${scene.scene_id}`);
                    }
                } else {
                    imageContainer.classList.add('hidden');
                }
            } catch (error) {
                console.warn(`⚠️ Could not generate image for scene ${scene.scene_id}:`, error);
                document.getElementById(`scene-image-${scene.scene_id}`).classList.add('hidden');
            }
        }

        function visualizeScene(sceneId) {
            const scene = scenes.find(s => s.scene_id === sceneId);
            if (scene && !scene.image_generated) {
                generateSceneImage(scene);
                scene.image_generated = true;
            }
        }

        // =====================================================================
        // AI DECISION-MAKING FUNCTIONS
        // =====================================================================

        async function generateAIDecision(situation, options) {
            try {
                const response = await fetch(`${NARRATIVE_SERVER}/ai-decision`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        session_id: sessionId,
                        situation: situation,
                        options: options
                    })
                });

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status}`);
                }

                const data = await response.json();
                if (data.success) {
                    displayAIDecision(data);
                    return data;
                } else {
                    throw new Error(data.error || 'Failed to generate AI decision');
                }
            } catch (error) {
                console.error('❌ Error generating AI decision:', error);
                showStatus('story-status', `❌ ${error.message}`, 'error');
                return null;
            }
        }

        async function generateStoryBranches(currentSituation, playerChoices) {
            try {
                const response = await fetch(`${NARRATIVE_SERVER}/story-branches`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        session_id: sessionId,
                        current_situation: currentSituation,
                        player_choices: playerChoices
                    })
                });

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status}`);
                }

                const data = await response.json();
                if (data.success) {
                    displayStoryBranches(data);
                    return data;
                } else {
                    throw new Error(data.error || 'Failed to generate story branches');
                }
            } catch (error) {
                console.error('❌ Error generating story branches:', error);
                showStatus('story-status', `❌ ${error.message}`, 'error');
                return null;
            }
        }

        async function generateNPCReaction(npcName, npcPersonality, playerAction, context) {
            try {
                const response = await fetch(`${NARRATIVE_SERVER}/npc-reaction`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        session_id: sessionId,
                        npc_name: npcName,
                        npc_personality: npcPersonality,
                        player_action: playerAction,
                        context: context
                    })
                });

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status}`);
                }

                const data = await response.json();
                if (data.success) {
                    displayNPCReaction(data);
                    return data;
                } else {
                    throw new Error(data.error || 'Failed to generate NPC reaction');
                }
            } catch (error) {
                console.error('❌ Error generating NPC reaction:', error);
                showStatus('story-status', `❌ ${error.message}`, 'error');
                return null;
            }
        }

        async function adaptNarrative(campaignHistory, recentEvents) {
            try {
                const response = await fetch(`${NARRATIVE_SERVER}/adapt-narrative`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        session_id: sessionId,
                        campaign_history: campaignHistory,
                        recent_events: recentEvents
                    })
                });

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status}`);
                }

                const data = await response.json();
                if (data.success) {
                    displayNarrativeAdaptation(data);
                    return data;
                } else {
                    throw new Error(data.error || 'Failed to adapt narrative');
                }
            } catch (error) {
                console.error('❌ Error adapting narrative:', error);
                showStatus('story-status', `❌ ${error.message}`, 'error');
                return null;
            }
        }

        function displayAIDecision(decision) {
            const container = document.getElementById('scenes-container');

            const decisionCard = document.createElement('div');
            decisionCard.className = 'scene-card';
            decisionCard.innerHTML = `
                <div class="scene-header">
                    <span class="scene-number">AI Decision Analysis</span>
                    <span class="scene-location">🤖 Gemini AI</span>
                </div>
                <div class="decision-matrix">
                    <h4>📊 Decision Matrix Analysis</h4>
                    <p><strong>Situation:</strong> ${sanitizeHTML(decision.situation)}</p>
                    <div class="ai-reasoning">
                        <h4>🧠 AI Reasoning</h4>
                        <p>${sanitizeHTML(decision.reasoning)}</p>
                    </div>
                    <div class="ai-reasoning">
                        <h4>💡 Recommendation</h4>
                        <p>${sanitizeHTML(decision.recommendation)}</p>
                    </div>
                </div>
            `;

            container.appendChild(decisionCard);
            decisionCard.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }

        function displayStoryBranches(branches) {
            const container = document.getElementById('scenes-container');

            const branchCard = document.createElement('div');
            branchCard.className = 'scene-card';
            branchCard.innerHTML = `
                <div class="scene-header">
                    <span class="scene-number">Story Branch Analysis</span>
                    <span class="scene-location">🌳 AI Storytelling</span>
                </div>
                <div class="decision-matrix">
                    <h4>🌿 Story Branch Analysis</h4>
                    <p><strong>Situation:</strong> ${sanitizeHTML(branches.situation)}</p>
                    <div class="ai-reasoning">
                        <h4>📖 Branch Analysis</h4>
                        <p>${sanitizeHTML(branches.branch_analysis)}</p>
                    </div>
                </div>
            `;

            container.appendChild(branchCard);
            branchCard.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }

        function displayNPCReaction(reaction) {
            const container = document.getElementById('scenes-container');

            const reactionCard = document.createElement('div');
            reactionCard.className = 'scene-card';
            reactionCard.innerHTML = `
                <div class="scene-header">
                    <span class="scene-number">NPC Reaction</span>
                    <span class="scene-location">👤 ${sanitizeHTML(reaction.npc_name)}</span>
                </div>
                <div class="decision-matrix">
                    <h4>🎭 ${sanitizeHTML(reaction.npc_name)}'s Reaction</h4>
                    <p><strong>Personality:</strong> ${sanitizeHTML(reaction.npc_personality)}</p>
                    <p><strong>Player Action:</strong> ${sanitizeHTML(reaction.player_action)}</p>
                    <div class="ai-reasoning">
                        <h4>💬 NPC Response</h4>
                        <p>${sanitizeHTML(reaction.reaction)}</p>
                    </div>
                </div>
            `;

            container.appendChild(reactionCard);
            reactionCard.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }

        function displayNarrativeAdaptation(adaptation) {
            const container = document.getElementById('scenes-container');

            const adaptationCard = document.createElement('div');
            adaptationCard.className = 'scene-card';
            adaptationCard.innerHTML = `
                <div class="scene-header">
                    <span class="scene-number">Narrative Adaptation</span>
                    <span class="scene-location">🔄 AI Story Evolution</span>
                </div>
                <div class="decision-matrix">
                    <h4>📚 Story Adaptation Suggestions</h4>
                    <div class="ai-reasoning">
                        <h4>🎯 Adaptation Analysis</h4>
                        <p>${sanitizeHTML(adaptation.adaptation_suggestions)}</p>
                    </div>
                </div>
            `;

            container.appendChild(adaptationCard);
            adaptationCard.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }

        // =====================================================================
        // INITIALIZATION
        // =====================================================================

        console.log('🎭 Narrative Theater initialized');
        console.log('📝 Required server: DnD Narrative Server (port 5002)');
        console.log('   Start with: python3 dnd_narrative_server.py');
        console.log('🤖 AI Decision-Making features available');
    </script>

    <!-- AI Decision-Making Modals -->
    <div id="decisionMatrixModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close" onclick="closeModal('decisionMatrixModal')">&times;</span>
                <h3>🧠 Decision Matrix Analysis</h3>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="decisionScenario">Decision Scenario:</label>
                    <textarea id="decisionScenario" placeholder="Describe the decision scenario..."></textarea>
                </div>
                <div class="form-group">
                    <label for="decisionOptions">Options (one per line):</label>
                    <textarea id="decisionOptions" placeholder="Option 1&#10;Option 2&#10;Option 3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button class="modal-btn secondary" onclick="closeModal('decisionMatrixModal')">Cancel</button>
                <button class="modal-btn primary" onclick="analyzeDecision()">Analyze Decision</button>
            </div>
        </div>
    </div>

    <div id="storyBranchesModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close" onclick="closeModal('storyBranchesModal')">&times;</span>
                <h3>🌳 Story Branch Analysis</h3>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="playerChoice">Player Choice:</label>
                    <textarea id="playerChoice" placeholder="Describe what the player chose to do..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button class="modal-btn secondary" onclick="closeModal('storyBranchesModal')">Cancel</button>
                <button class="modal-btn primary" onclick="analyzePlayerChoice()">Analyze Choice</button>
            </div>
        </div>
    </div>

    <div id="npcBehaviorModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close" onclick="closeModal('npcBehaviorModal')">&times;</span>
                <h3>👤 NPC Behavior Generation</h3>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="npcName">NPC Name:</label>
                    <input type="text" id="npcName" placeholder="Enter NPC name...">
                </div>
                <div class="form-group">
                    <label for="npcPersonality">Personality:</label>
                    <textarea id="npcPersonality" placeholder="Describe the NPC's personality..."></textarea>
                </div>
                <div class="form-group">
                    <label for="npcSituation">Current Situation:</label>
                    <textarea id="npcSituation" placeholder="Describe the current situation..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button class="modal-btn secondary" onclick="closeModal('npcBehaviorModal')">Cancel</button>
                <button class="modal-btn primary" onclick="generateNPCBehaviorFromModal()">Generate Behavior</button>
            </div>
        </div>
    </div>

    <div id="adaptiveStoryModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close" onclick="closeModal('adaptiveStoryModal')">&times;</span>
                <h3>📚 Adaptive Story Generation</h3>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="storyElement">Story Element:</label>
                    <textarea id="storyElement" placeholder="Describe what story element you want to generate..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button class="modal-btn secondary" onclick="closeModal('adaptiveStoryModal')">Cancel</button>
                <button class="modal-btn primary" onclick="generateAdaptiveStoryFromModal()">Generate Story</button>
            </div>
        </div>
    </div>

    <script>
        // =====================================================================
        // MODAL FUNCTIONS
        // =====================================================================

        function showDecisionMatrixModal() {
            document.getElementById('decisionMatrixModal').style.display = 'block';
        }

        function showStoryBranchesModal() {
            document.getElementById('storyBranchesModal').style.display = 'block';
        }

        function showNPCBehaviorModal() {
            document.getElementById('npcBehaviorModal').style.display = 'block';
        }

        function showAdaptiveStoryModal() {
            document.getElementById('adaptiveStoryModal').style.display = 'block';
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Close modals when clicking outside
        window.onclick = function(event) {
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        }

        async function analyzeDecision() {
            const scenario = document.getElementById('decisionScenario').value;
            const optionsText = document.getElementById('decisionOptions').value;

            if (!scenario || !optionsText) {
                alert('Please fill in both scenario and options');
                return;
            }

            const options = optionsText.split('\n').filter(option => option.trim());

            if (options.length < 2) {
                alert('Please provide at least 2 options');
                return;
            }

            closeModal('decisionMatrixModal');
            await generateDecisionMatrix(scenario, options);
        }

        async function analyzePlayerChoice() {
            const playerChoice = document.getElementById('playerChoice').value;

            if (!playerChoice) {
                alert('Please describe the player choice');
                return;
            }

            closeModal('storyBranchesModal');
            await analyzeStoryBranches(playerChoice);
        }

        async function generateNPCBehaviorFromModal() {
            const npcName = document.getElementById('npcName').value;
            const npcPersonality = document.getElementById('npcPersonality').value;
            const npcSituation = document.getElementById('npcSituation').value;

            if (!npcName || !npcPersonality || !npcSituation) {
                alert('Please fill in all fields');
                return;
            }

            closeModal('npcBehaviorModal');
            await generateNPCBehavior(npcName, npcPersonality, npcSituation);
        }

        async function generateAdaptiveStoryFromModal() {
            const storyElement = document.getElementById('storyElement').value;

            if (!storyElement) {
                alert('Please describe the story element');
                return;
            }

            closeModal('adaptiveStoryModal');
            await generateAdaptiveStory(storyElement);
        }

        // Show AI controls when adventure starts
        function showAIControls() {
            document.getElementById('ai-controls').classList.remove('hidden');
        }

        // Hide AI controls when adventure ends
        function hideAIControls() {
            document.getElementById('ai-controls').classList.add('hidden');
        }

        // Initialize the page when it loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('=== 🎭 NARRATIVE THEATER LOADING ===');
            console.log('1. DOMContentLoaded event fired');

            // Log all major elements
            console.log('2. Checking for key elements:');
            console.log('   - body:', document.body ? '✅ Found' : '❌ Missing');
            console.log('   - container:', document.querySelector('.container') ? '✅ Found' : '❌ Missing');
            console.log('   - header:', document.querySelector('.header') ? '✅ Found' : '❌ Missing');
            console.log('   - start-screen:', document.getElementById('start-screen') ? '✅ Found' : '❌ Missing');
            console.log('   - workspace:', document.getElementById('workspace') ? '✅ Found' : '❌ Missing');

            // Log computed styles for start-screen
            const startScreen = document.getElementById('start-screen');
            if (startScreen) {
                const styles = window.getComputedStyle(startScreen);
                console.log('3. Start screen computed styles:');
                console.log('   - display:', styles.display);
                console.log('   - visibility:', styles.visibility);
                console.log('   - opacity:', styles.opacity);
                console.log('   - width:', styles.width);
                console.log('   - height:', styles.height);
            }

            console.log('4. Testing backend connection...');
            // Test backend connection
            testBackendConnection();

            console.log('5. Setting up event listeners...');
            // Set up event listeners
            setupEventListeners();

            console.log('6. Initializing UI...');
            // Initialize UI state
            initializeUI();

            console.log('=== ✅ INITIALIZATION COMPLETE ===');
        });

        async function testBackendConnection() {
            try {
                const response = await fetch('http://localhost:5002/health');
                const data = await response.json();
                console.log('✅ Backend connected:', data);
                return true;
            } catch (error) {
                console.error('❌ Backend connection failed:', error);
                showError('Backend connection failed. Please make sure the narrative server is running on port 5002.');
                return false;
            }
        }

        function setupEventListeners() {
            // Add event listeners for buttons
            const startButton = document.getElementById('startAdventure');
            if (startButton) {
                startButton.addEventListener('click', startAdventure);
            }
        }

        function initializeUI() {
            // Show the start screen
            const startScreen = document.getElementById('start-screen');
            if (startScreen) {
                startScreen.style.display = 'block';
                console.log('✅ Start screen should be visible');
            } else {
                console.error('❌ Start screen element not found');
            }

            // Hide loading states
            const loadingElements = document.querySelectorAll('.loading');
            loadingElements.forEach(el => el.style.display = 'none');

            console.log('✅ UI initialized');
        }

        function showError(message) {
            // Create error display
            const errorDiv = document.createElement('div');
            errorDiv.style.cssText = `
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background: #e74c3c;
                color: white;
                padding: 15px 30px;
                border-radius: 5px;
                z-index: 10000;
                font-family: Arial, sans-serif;
                box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            `;
            errorDiv.textContent = message;
            document.body.appendChild(errorDiv);

            // Remove after 5 seconds
            setTimeout(() => {
                if (errorDiv.parentNode) {
                    errorDiv.parentNode.removeChild(errorDiv);
                }
            }, 5000);
        }
    </script>
</body>
</html>

