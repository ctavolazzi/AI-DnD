"""Google Gemini API integration service."""
import base64
from io import BytesIO
from PIL import Image
import google.generativeai as genai

from app.config import settings


# Initialize Gemini
if settings.gemini_api_key:
    genai.configure(api_key=settings.gemini_api_key)


async def enhance_image(
    sprite_image: bytes,
    enhancement_prompt: str,
    style: str = "photorealistic"
) -> bytes:
    """
    Enhance sprite image using Gemini image generation.

    Args:
        sprite_image: Original sprite image bytes
        enhancement_prompt: Text prompt for enhancement
        style: Style preset (photorealistic, fantasy, etc.)

    Returns:
        bytes: Enhanced PNG image data
    """
    if not settings.gemini_api_key:
        raise ValueError("Gemini API key not configured")

    # Style presets
    style_prompts = {
        "photorealistic": "Transform this into a photorealistic, highly detailed image:",
        "fantasy": "Transform this into detailed fantasy artwork:",
        "comic": "Transform this into comic book style illustration:",
        "cyberpunk": "Transform this into a cyberpunk style image:",
        "medieval": "Transform this into a medieval fantasy style:",
    }

    style_prefix = style_prompts.get(style, style_prompts["photorealistic"])
    full_prompt = f"{style_prefix} {enhancement_prompt}"

    # Load image
    image = Image.open(BytesIO(sprite_image))

    # Generate enhanced version using Gemini
    model = genai.GenerativeModel('gemini-2.0-flash-exp')

    response = model.generate_content([
        full_prompt,
        image
    ])

    # Extract image from response
    # Note: Adjust based on actual Gemini API response format
    if hasattr(response, 'images') and response.images:
        enhanced_image = response.images[0]

        # Convert to bytes
        output = BytesIO()
        enhanced_image.save(output, format='PNG')
        return output.getvalue()

    raise ValueError("No image generated by Gemini")

