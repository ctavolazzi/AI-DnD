# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# VS Code
.vscode/

# Obsidian specific files
.obsidian/
.trash/
.DS_Store
*.workspaces
.stignore
*.temp
*.tmp
*.bak
*sync-conflict*

# Project specific
# Test vault and its contents
ai-dnd-test-vault/
# Current run file that changes frequently
Current Run.md
# Any logs
logs/
*.log
# Temporary files created during testing
*_temp/
*_temp.*
# Credentials or config files with sensitive data
*credentials*
*secret*
*apikey*
.mcp.json
.env.local
# Runtime generated files
*.pid
# Ollama model files
.ollama/

# MacOS specific
.DS_Store
.AppleDouble
.LSOverride
._*

# Node.js
node_modules/
package-lock.json
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# cursor-coding-protocols installation files
.cursor/
.mcp-servers/
mcp-jungle-gym/
scripts/cursor-protocols-cli.js
scripts/mcp-error-analyzer.sh
scripts/mcp-test-runner.sh
scripts/version-manager.js
shared/
.cursor-protocols-version.json

# Work efforts (personal task tracking - uncomment to track in git)
_work_efforts_/

# AI-DnD Project Specific
# Test vaults for development (not production game data)
*-test-vault/
character-journal-test-vault/
journal-test-vault/
ai-dnd-test-vault/

# Game state files (temporary/runtime)
character_state.json
game_state.json
*.game_state

# Database files (runtime generated)
*.db
*.sqlite
*.sqlite3

# Generated images and assets
backend/images/
backend/backups/

# Standalone builds
*-standalone.html

# Session documentation (keep latest, ignore dated archives)
SESSION_SUMMARY_*.md
SESSION_DOSSIER_*.md